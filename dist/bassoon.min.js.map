{"version":3,"sources":["webpack://bassoon/./src/bassoon.mjs","webpack://bassoon/./src/Emitter.mjs","webpack://bassoon/./src/Parser.mjs","webpack://bassoon/webpack/bootstrap","webpack://bassoon/webpack/startup","webpack://bassoon/webpack/runtime/define property getters","webpack://bassoon/webpack/runtime/hasOwnProperty shorthand"],"names":["bassoon","arg1","abort","aborted","xhr","onreadystatechange","onload","onerror","emitData","data","chunkSize","chunk","push","length","emitter","emit","args","url","_events","_get","key","this","callback","queue","on","event","i","call","worker","Worker","URL","location","toString","workerPath","workerObj","onmessage","evt","cmd","postMessage","method","withCredentials","verbose","parser","depth","stack","parseKey","pattern","keyPattern","lastIndex","match","exec","buffer","groups","value1","value2","state","VALUE","parseValue","type","STRING","stringPattern","NUMBER","numberPattern","TRUE","truePattern","FALSE","falsePattern","NULL","nullPattern","UNDEFINED","undefinedPattern","value","parseFloat","undefined","BEGIN","pop","parse","c","END","ARRAY","OBJECT","KEY","Error","substring","end","Parser","console","log","repeat","curObj","curKey","seen","XMLHttpRequest","open","responseType","readyState","fullText","responseText","newText","substr","error","status","statusText","timeout","send","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","d","definition","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty"],"mappings":"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","file":"bassoon.min.js","sourcesContent":["import Emitter from './Emitter.mjs';\r\nimport Parser from './Parser.mjs';\r\nimport BassoonWorker from 'worker-loader!./bassoon.worker.js';\r\n\r\nexport default function bassoon(arg1) {\r\n  'use strict';\r\n\r\n  const args = typeof arg1 === 'string' ? { url: arg1 } : arg1;\r\n\r\n  // web worker integration\r\n  const emitter = Emitter();\r\n  let aborted = false;\r\n  if (args.worker && Worker) {\r\n    // fix the URL so that it is relative to the current page\r\n    args.url = new URL(args.url, location).toString();\r\n    // start the worker\r\n    const workerPath = args.workerPath || '/bassoon/bassoon.worker.js';\r\n    const workerObj = new Worker(workerPath);\r\n    //const workerObj = new BassoonWorker();\r\n    workerObj.onmessage = function (evt) {\r\n      if (!aborted) emitter.emit(evt.data.cmd, evt.data.data);\r\n    };\r\n    workerObj.postMessage({ cmd: 'start', args });\r\n    emitter.abort = function () {\r\n      aborted = true;\r\n      workerObj.postMessage({ cmd: 'abort' });\r\n    };\r\n    return emitter;\r\n  }\r\n\r\n  // arguments\r\n  const url = args.url;\r\n  const method = args.method || 'GET';\r\n  const withCredentials = args.withCredentials || false;\r\n  const verbose = args.verbose || false;\r\n  const chunkSize = args.chunkSize;\r\n\r\n  // request state\r\n  const parser = Parser(parse);\r\n  let xhr = null;\r\n  let seen = 0;\r\n  let chunk = [];\r\n  let stack = [];\r\n  let curObj = null;\r\n  let curKey = null;\r\n\r\n  // methods\r\n\r\n  function abort() {\r\n    aborted = true;\r\n    if (xhr) {\r\n      xhr.onreadystatechange = null;\r\n      xhr.onload = null;\r\n      xhr.onerror = null;\r\n      xhr.abort();\r\n    }\r\n  }\r\n\r\n  function emitData(data) {\r\n    if (aborted) return;\r\n    if (chunkSize) {\r\n      chunk.push(data);\r\n      if (chunk.length >= chunkSize) {\r\n        emitter.emit('data', chunk);\r\n        chunk = [];\r\n      }\r\n    } else {\r\n      emitter.emit('data', data);\r\n    }\r\n  }\r\n\r\n  function parse({ key, data, depth }) {\r\n    if (aborted) return;\r\n    if (verbose) console.log(' '.repeat(depth * 2), key, data);\r\n    if (curObj) {\r\n      // processing object/array\r\n      switch (key) {\r\n        case 'openarray':\r\n          stack.push({ curObj, curKey });\r\n          curObj = [];\r\n          curKey = null;\r\n          break;\r\n        case 'openobject':\r\n          stack.push({ curObj, curKey });\r\n          curObj = {};\r\n          curKey = null;\r\n          break;\r\n        case 'closearray':\r\n        case 'closeobject':\r\n          if (stack.length) {\r\n            let data = curObj;\r\n            ({ curObj, curKey } = stack.pop());\r\n            if (curKey !== null) {\r\n              curObj[curKey] = data;\r\n              curKey = null;\r\n            } else {\r\n              curObj.push(data);\r\n            }\r\n          } else {\r\n            emitData(curObj);\r\n            curObj = curKey = null;\r\n          }\r\n          break;\r\n        case 'key':\r\n          curKey = data;\r\n          break;\r\n        case 'value':\r\n          if (curKey !== null) {\r\n            curObj[curKey] = data;\r\n            curKey = null;\r\n          } else {\r\n            curObj.push(data);\r\n          }\r\n          break;\r\n      }\r\n    } else {\r\n      // processing root\r\n      switch (key) {\r\n        case 'openarray':\r\n        case 'closearray':\r\n          // ignore root array\r\n          break;\r\n        case 'openobject':\r\n          curObj = {};\r\n          break;\r\n        case 'value':\r\n          emitData(data);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // main logic\r\n\r\n  try {\r\n    xhr = new XMLHttpRequest();\r\n    xhr.open(method || 'GET', url);\r\n    xhr.responseType = 'text';\r\n    xhr.withCredentials = withCredentials;\r\n\r\n    xhr.onreadystatechange = function (evt) {\r\n      try {\r\n        if (xhr.readyState > 2) {\r\n          const fullText = xhr.responseText;\r\n          const newText = fullText.substr(seen);\r\n          seen = fullText.length;\r\n          parser.parse(newText);\r\n        }\r\n      } catch (error) {\r\n        abort();\r\n        emitter.emit('error', error);\r\n      }\r\n    };\r\n    xhr.onload = function (event) {\r\n      try {\r\n        // let the parser terminate any partial values\r\n        parser.end();\r\n        // emit the last object, even if it is incomplete\r\n        if (stack.length) {\r\n          emitData(stack[0]);\r\n        } else if (curObj) {\r\n          emitData(curObj);\r\n        }\r\n        // emit the last chunk\r\n        if (chunk.length) {\r\n          emitter.emit('data', chunk);\r\n        }\r\n        emitter.emit('end', {\r\n          status: xhr.status,\r\n          statusText: xhr.statusText,\r\n        });\r\n      } catch (error) {\r\n        emitter.emit('error', error);\r\n      }\r\n    };\r\n    xhr.onerror = function (event) {\r\n      const error = new Error('Network Error');\r\n      error.status = xhr.status;\r\n      error.statusText = xhr.statusText;\r\n      error.timeout = xhr.timeout;\r\n      emitter.emit('error', error);\r\n    };\r\n\r\n    xhr.send();\r\n  } catch (error) {\r\n    console.error(error);\r\n    abort();\r\n    emitter.emit('error', error);\r\n  }\r\n\r\n  emitter.abort = abort;\r\n  return emitter;\r\n}\r\n","export default function Emitter() {\r\n  return {\r\n    _events: {},\r\n    _get(key) {\r\n      if (!this._events[key]) {\r\n        this._events[key] = { callback: null, queue: [] };\r\n      }\r\n      return this._events[key];\r\n    },\r\n    on(key, callback) {\r\n      const event = this._get(key);\r\n      const queue = event.queue;\r\n      event.callback = callback;\r\n      if (callback && queue.length) {\r\n        // emit missed events\r\n        for (let i = 0; i < queue.length; ++i) {\r\n          callback.call(this, queue[i]);\r\n        }\r\n        event.queue = [];\r\n      }\r\n      return this;\r\n    },\r\n    emit(key, data) {\r\n      const event = this._get(key);\r\n      const callback = event.callback;\r\n      if (callback) {\r\n        // emit current event\r\n        callback.call(this, data);\r\n      } else {\r\n        // save events so that they don't get dropped\r\n        event.queue.push(data);\r\n      }\r\n      return this;\r\n    },\r\n  };\r\n}\r\n","export default function Parser(callback) {\r\n  // states\r\n  const BEGIN = 0;\r\n  const ARRAY = 1;\r\n  const OBJECT = 2;\r\n  const KEY = 3;\r\n  const VALUE = 4;\r\n  const STRING = 5;\r\n  const NUMBER = 6;\r\n  const TRUE = 7;\r\n  const FALSE = 8;\r\n  const NULL = 9;\r\n  const UNDEFINED = 10;\r\n  const END = 11;\r\n\r\n  // patterns\r\n  // const whitespacePattern = /^[ \\t\\n\\r]+/;\r\n  const keyPattern = /((\"(?<value1>[^\\\\\"]+)\")|(?<value2>\\w+))[ \\t\\n\\r]*:[ \\t\\n\\r]*/y;\r\n  const stringPattern = /\"(?<value>(?:[^\\\\\"]|(?:\\\\[\"\\\\/bfnrtv])|(?:\\\\u[0-9a-fA-F]{4}))*)\"[ \\t\\n\\r,}\\]]/y;\r\n  const numberPattern = /(?<value>[-+]?\\d+(.\\d+)?([eE][-+]?\\d+)?)[ \\t\\n\\r,}\\]]/y;\r\n  const truePattern = /(?<value>true)[ \\t\\n\\r,}\\]]/iy;\r\n  const falsePattern = /(?<value>false)[ \\t\\n\\r,}\\]]/iy;\r\n  const nullPattern = /(?<value>null)[ \\t\\n\\r,}\\]]/iy;\r\n  const undefinedPattern = /[^ \\t\\n\\r,}\\]]+[ \\t\\n\\r,}\\]]/y;\r\n\r\n  // parser state\r\n  const stack = [];\r\n  let state = BEGIN;\r\n  let key = null;\r\n  let value = null;\r\n  let match = null;\r\n  let buffer = '';\r\n  let i = 0;\r\n\r\n  // build and return parser object\r\n  const parser = { parse, end, callback };\r\n  return parser;\r\n\r\n  function emit(key, data) {\r\n    // console.log(' '.repeat(stack.length * 2), key, data);\r\n    callback = parser.callback;\r\n    if (callback) {\r\n      callback({ key, data, depth: stack.length });\r\n    }\r\n  }\r\n\r\n  function parseKey() {\r\n    let pattern = keyPattern;\r\n    pattern.lastIndex = i;\r\n    match = pattern.exec(buffer);\r\n    if (match) {\r\n      i = pattern.lastIndex - 1;\r\n      key = match.groups.value1 || match.groups.value2;\r\n      emit('key', key);\r\n      state = VALUE;\r\n      return true;\r\n    } else {\r\n      // console.log('key incomplete', buffer.substr(i, 20), '...');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function parseValue(type) {\r\n    let pattern = null;\r\n    switch (type) {\r\n      case STRING:\r\n        pattern = stringPattern;\r\n        break;\r\n      case NUMBER:\r\n        pattern = numberPattern;\r\n        break;\r\n      case TRUE:\r\n        pattern = truePattern;\r\n        break;\r\n      case FALSE:\r\n        pattern = falsePattern;\r\n        break;\r\n      case NULL:\r\n        pattern = nullPattern;\r\n        break;\r\n      case UNDEFINED:\r\n        pattern = undefinedPattern;\r\n        break;\r\n    }\r\n\r\n    pattern.lastIndex = i;\r\n    match = pattern.exec(buffer);\r\n    if (match) {\r\n      // exclude the terminating ,}]\r\n      i = pattern.lastIndex - 2;\r\n\r\n      switch (type) {\r\n        case STRING:\r\n          value = match.groups.value;\r\n          break;\r\n        case NUMBER:\r\n          value = parseFloat(match.groups.value);\r\n          break;\r\n        case TRUE:\r\n          value = true;\r\n          break;\r\n        case FALSE:\r\n          value = false;\r\n          break;\r\n        case NULL:\r\n          value = null;\r\n          break;\r\n        case UNDEFINED:\r\n          value = undefined;\r\n          break;\r\n      }\r\n\r\n      emit('value', value);\r\n      if (state !== BEGIN) {\r\n        state = stack.pop();\r\n      }\r\n      return true;\r\n    } else {\r\n      // console.log('value incomplete', buffer.substr(i, 20), '...');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function parse(chunk) {\r\n    buffer += chunk;\r\n\r\n    for (; i < buffer.length; ++i) {\r\n      const c = buffer[i];\r\n      switch (state) {\r\n        case END:\r\n          // skip all remaining text\r\n          i = buffer.length;\r\n          break;\r\n        case BEGIN:\r\n        case VALUE:\r\n          switch (c) {\r\n            case ' ':\r\n            case '\\t':\r\n            case '\\n':\r\n            case '\\r':\r\n              // ignore whitespace\r\n              break;\r\n            case '[':\r\n              emit('openarray');\r\n              state = ARRAY;\r\n              break;\r\n            case '{':\r\n              emit('openobject');\r\n              state = OBJECT;\r\n              break;\r\n            case '\"':\r\n              if (!parseValue(STRING)) {\r\n                // continue parsing when we get more data\r\n                return;\r\n              }\r\n              break;\r\n            case '-':\r\n            case '+':\r\n            case '.':\r\n            case '0':\r\n            case '1':\r\n            case '2':\r\n            case '3':\r\n            case '4':\r\n            case '5':\r\n            case '6':\r\n            case '7':\r\n            case '8':\r\n            case '9':\r\n              if (!parseValue(NUMBER)) {\r\n                // continue parsing when we get more data\r\n                return;\r\n              }\r\n              break;\r\n            case 't':\r\n            case 'T':\r\n              if (!parseValue(TRUE)) {\r\n                // continue parsing when we get more data\r\n                return;\r\n              }\r\n              break;\r\n            case 'f':\r\n            case 'F':\r\n              if (!parseValue(FALSE)) {\r\n                // continue parsing when we get more data\r\n                return;\r\n              }\r\n              break;\r\n            case 'n':\r\n            case 'N':\r\n              if (!parseValue(NULL)) {\r\n                // continue parsing when we get more data\r\n                return;\r\n              }\r\n              break;\r\n            default:\r\n              if (!parseValue(UNDEFINED)) {\r\n                // continue parsing when we get more data\r\n                return;\r\n              }\r\n              break;\r\n          }\r\n          break;\r\n        case ARRAY:\r\n          switch (c) {\r\n            case ' ':\r\n            case '\\t':\r\n            case '\\n':\r\n            case '\\r':\r\n              // ignore whitespace\r\n              break;\r\n            case ']':\r\n              emit('closearray');\r\n              state = stack.length ? stack.pop() : BEGIN;\r\n              break;\r\n            case ',':\r\n              // ignore extra commas\r\n              break;\r\n            default:\r\n              stack.push(state);\r\n              state = VALUE;\r\n              --i;\r\n              break;\r\n          }\r\n          break;\r\n        case OBJECT:\r\n          switch (c) {\r\n            case ' ':\r\n            case '\\t':\r\n            case '\\n':\r\n            case '\\r':\r\n              // ignore whitespace\r\n              break;\r\n            case '}':\r\n              emit('closeobject');\r\n              state = stack.length ? stack.pop() : BEGIN;\r\n              break;\r\n            case '{':\r\n            case '[':\r\n            case ']':\r\n            case ',':\r\n              // ignore stray characters\r\n              break;\r\n            default:\r\n              stack.push(state);\r\n              state = KEY;\r\n              --i;\r\n              break;\r\n          }\r\n          break;\r\n        case KEY:\r\n          if (!parseKey()) {\r\n            // continue parsing when we get more data\r\n            return;\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error('unexpected state ' + state);\r\n      }\r\n    }\r\n\r\n    buffer = buffer.substring(i);\r\n    i = 0;\r\n  }\r\n\r\n  function end() {\r\n    return parse(',');\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(774);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)"],"sourceRoot":""}