{"version":3,"sources":["webpack://bassoon/./src/bassoon.worker.js"],"names":["console","log"],"mappings":"6BAAAA,QAAQC,IAAI","file":"bassoon.worker.min.worker.worker.js","sourcesContent":["console.log('worker');\r\n\r\n//importScripts('bassoon.min.js');\r\n//import bassoon from './bassoon.mjs';\r\n\r\n/*\r\nself.onmessage = (evt) => {\r\n  const cmd = evt.data.cmd;\r\n  const args = evt.data.args;\r\n  switch (cmd) {\r\n    case 'start':\r\n      return start(args);\r\n    case 'abort':\r\n      if (req) {\r\n        return req.abort();\r\n      } else {\r\n        return false;\r\n      }\r\n  }\r\n};\r\n\r\nlet req = null;\r\n\r\nconst start = (args) => {\r\n  try {\r\n    console.log('worker started');\r\n    args.worker = false;\r\n    req = bassoon(args);\r\n    req.on('data', (data) => self.postMessage({ cmd: 'data', data: data }));\r\n    req.on('end', (event) => self.postMessage({ cmd: 'end', data: event }));\r\n    req.on('error', (error) => self.postMessage({ cmd: 'error', data: error }));\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    if (req) req.abort();\r\n    self.postMessage({ cmd: 'error', data: error });\r\n    return false;\r\n  }\r\n};\r\n*/"],"sourceRoot":""}